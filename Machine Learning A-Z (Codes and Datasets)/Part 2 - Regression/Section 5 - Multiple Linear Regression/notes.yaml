Multiple Linear Regression:
  - y = b0 + b1*x1 + b2*x2 + ... + bn*xn
  - Categorical variables need to become dummy values:
    - You can do this by expanding the column into multiple columns with 1 and 0, depending on the variable.
    - Always omit at least one dummy variable
Assumptions:
  - Linearity
  - Homoscedasticity
  - Multivariate normality
  - Independence of errors
  - Lack of multicolinearity


Model Building Options:
  - Backward Selection:
    - Get lowest P value below Significant Level (SL)
    - This is the one selected for the tutorials
  - Forward Selection:
    - Get highest P value above Significant Level (SL)
  - Bidirectional Elimination:
      -

Python:
  - As I explained in the previous tutorial, Backward Elimination is irrelevant in Python, because the Scikit-Learn library automatically takes care of selecting the statistically significant features when training the model to make accurate predictions.
    - Technique:
      - Below:
        # Avoiding the Dummy Variable Trap
        X = X[:, 1:]

        # Multiple Linear Regression

        # Importing the libraries
        import numpy as np
        import matplotlib.pyplot as plt
        import pandas as pd

        # Importing the dataset
        dataset = pd.read_csv('50_Startups.csv')
        X = dataset.iloc[:, :-1].values
        y = dataset.iloc[:, -1].values
        print(X)

        # Encoding categorical data
        from sklearn.compose import ColumnTransformer
        from sklearn.preprocessing import OneHotEncoder
        ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3])], remainder='passthrough')
        X = np.array(ct.fit_transform(X))
        print(X)

        # Avoiding the Dummy Variable Trap
        X = X[:, 1:]

        # Splitting the dataset into the Training set and Test set
        from sklearn.model_selection import train_test_split
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

        # Training the Multiple Linear Regression model on the Training set
        from sklearn.linear_model import LinearRegression
        regressor = LinearRegression()
        regressor.fit(X_train, y_train)

        # Predicting the Test set results
        y_pred = regressor.predict(X_test)
        np.set_printoptions(precision=2)
        print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

        # Building the optimal model using Backward Elimination
        import statsmodels.api as sm
        X = np.append(arr = np.ones((50, 1)).astype(int), values = X, axis = 1)
        X_opt = X[:, [0, 1, 2, 3, 4, 5]]
        X_opt = X_opt.astype(np.float64)
        regressor_OLS = sm.OLS(endog = y, exog = X_opt).fit()
        regressor_OLS.summary()X_opt = X[:, [0, 1, 3, 4, 5]]
        X_opt = X_opt.astype(np.float64)
        regressor_OLS = sm.OLS(endog = y, exog = X_opt).fit()
        regressor_OLS.summary()X_opt = X[:, [0, 3, 4, 5]]
        X_opt = X_opt.astype(np.float64)
        regressor_OLS = sm.OLS(endog = y, exog = X_opt).fit()
        regressor_OLS.summary()X_opt = X[:, [0, 3, 5]]
        X_opt = X_opt.astype(np.float64)
        regressor_OLS = sm.OLS(endog = y, exog = X_opt).fit()
        regressor_OLS.summary()X_opt = X[:, [0, 3]]
        X_opt = X_opt.astype(np.float64)regressor_OLS = sm.OLS(endog = y, exog = X_opt).fit()
        regressor_OLS.summary()
